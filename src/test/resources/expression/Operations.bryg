; This does of course not replace proper tests,
; but it is a start for now!

; Old but noteworthy code:
; tr
  ; td: -16 >> 2
  ; td              ; We need to qualify td as a proper block function call, because
    ; -16 >> 2      ; the compiler prefers subtraction and trivial function calls
                    ; over statement function calls in this context.


in Format format
in int a
in int b

html
  @head
  @body

; The duplicate terms are inefficient and hard to maintain,
; but I doubt that a template language should fix the problem
; of printing the source code.
frag section
  in String heading
  in Closure content

  div(class 'box')
    h1 heading
    table
      thead tr
        th: term
        th: result
      @content

frag row
  in boolean odd
  in String term
  in Object result

  tr(class 'odd' if odd)
    td term
    td result

frag head
  head
    style:
      .box {
        display: inline-block;
        width: 200px;
        float: left;
        border: 1px solid black;
        margin-right: 10px;
        margin-bottom: 10px;
      }

      .box p {
        padding: 5px;
      }

      .box h1 {
        font-size: 20pt;
        text-align: center;
      }

      .box table {
        border-collapse: collapse;
        border-spacing: 0px;
      }

      .box thead {
        border-bottom: 1px solid black;
        border-top: 1px solid black;
      }

      .box td {
        width: 90px;
        padding: 5px;
      }

      .box tr.odd {
        background: #DFDFDF;
      }

frag body
  body
    div
      @section ('Variables')
        @row (odd false, 'a', a)
        @row (odd true, 'b', b)

      @section ('Addition')
        @row (odd false, '5 + a', 5 + a)
        @row (odd true, 'b + 7', b + 7)
        @row (odd false, 'a + b', a + b)
        @row (odd true, 'a + a + b', a + a + b)
        @row (odd false, 'a + 1.0f', a + 1.0f)
        @row (odd true, '1.0 + b', 1.0 + b)
        @row (odd false, 'a + 0.0 + b', a + 0.0 + b)

      @section ('Subtraction')
        @row (odd false, '5 - a', (5 - a))          ; TODO: This is another problem; The unary minus induces complete chaos.
        @row (odd true, 'b - 7', (b - 7))
        @row (odd false, 'a - b', (a - b))
        @row (odd true, 'a - a - b', (a - a - b))
        @row (odd false, 'a - 1.0f', (a - 1.0f))
        @row (odd true, '1.0 - b', (1.0 - b))
        @row (odd false, 'a - 0.0 - b', (a - 0.0 - b))

      @section ('Multiplication')
        @row (odd false, '5 * a', 5 * a)
        @row (odd true, 'b * 7', b * 7)
        @row (odd false, 'a * b', a * b)
        @row (odd true, 'a * a * b', a * a * b)
        @row (odd false, 'a * 1.0f', a * 1.0f)
        @row (odd true, '1.0 * b', 1.0 * b)
        @row (odd false, 'a * 0.0 * b', a * 0.0 * b)

      @section ('Division')
        @row (odd false, '5 / a', 5 / a)
        @row (odd true, 'b / 7', b / 7)
        @row (odd false, 'a / b', a / b)
        @row (odd true, 'a / a / b', a / a / b)
        @row (odd false, 'a / 1.0f', a / 1.0f)
        @row (odd true, '1.0 / b', 1.0 / b)
        @row (odd false, 'a / 0.0 / b', a / 0.0 / b)

      @section ('Remainder')
        @row (odd false, '5 % a', 5 % a)
        @row (odd true, 'b % 7', b % 7)
        @row (odd false, 'a % b', a % b)
        @row (odd true, 'a % a % b', a % a % b)
        @row (odd false, 'a % 1.0f', a % 1.0f)
        @row (odd true, '1.0 % b', 1.0 % b)
        @row (odd false, 'a % 0.0 % b', a % 0.0 % b)

      @section ('Increment and Decrement')
        mut int value = 0
        @row (odd false, 'value', value)
        @row (odd true, '++value', ++value)
        @row (odd false, 'value++', value++)
        @row (odd true, 'value', value)
        @row (odd false, '--value', --value)
        @row (odd true, 'value--', value--)
        @row (odd false, 'value', value)

      @section ('Bitwise')
        val byte x = (byte) a
        val byte y = (byte) b
        @row (odd false, 'x', format.i2b((byte) x))
        @row (odd true, 'y', format.i2b((byte) y))
        @row (odd false, '~x', format.i2b((byte) ~x))
        @row (odd true, 'x & y', format.i2b((byte) (x & y)))
        @row (odd false, 'x ^ y', format.i2b((byte) (x ^ y)))
        @row (odd true, 'x | y', format.i2b((byte) (x | y)))

      @section ('Shift')
        @row (odd false, '1 << 3', 1 << 3)
        @row (odd true, '16 >> 2', 16 >> 2)
        @row (odd false, '-16 >> 2', -16 >> 2)
        @row (odd true, '16 >>> 2', 16 >>> 2)
        @row (odd false, '-16 >>> 2', -16 >>> 2)

      @section ('Assignment')
        mut int value = 0
        @row (odd false, 'value', value)

        value += 5
        @row (odd true, 'value += 5', value)

        value -= 8
        @row (odd false, 'value -= 8', value)

        value *= 16
        @row (odd true, 'value *= 16', value)

        value /= 2
        @row (odd false, 'value /= 2', value)

        value %= 4
        @row (odd true, 'value %= 4', value)

        value &= 15
        @row (odd false, 'value &= 15', value)

        value ^= 16
        @row (odd true, 'value ^= 16', value)

        value |= 15
        @row (odd false, 'value |= 15', value)

        value >>= 4
        @row (odd true, 'value >>= 4', value)

        value <<= 3
        @row (odd false, 'value <<= 3', value)

        value >>>= 1
        @row (odd true, 'value >>>= 1', value)