; This does of course not replace proper tests,
; but it is a start for now!

in int a
in int b

html
  head
    style:
      .box {
        display: inline-block;
        width: 200px;
        float: left;
        border: 1px solid black;
        margin-right: 10px;
        margin-bottom: 10px;
      }

      .box p {
        padding: 5px;
      }

      .box h1 {
        font-size: 20pt;
        text-align: center;
      }

      .box table {
        border-collapse: collapse;
        border-spacing: 0px;
      }

      .box thead {
        border-bottom: 1px solid black;
        border-top: 1px solid black;
      }

      .box td {
        width: 90px;
        padding: 5px;
      }

      .box tr.odd {
        background: #DFDFDF;
      }
  body
    div
      val odd = 'odd'

      div(class 'box')
        h1: Basis
        p 'a = ' + a
        p 'b = ' + b

      ; The duplicate terms are inefficient and hard to maintain,
      ; but I doubt that a template language should fix the problem
      ; of printing the source code.
      ; Once we introduce fragments and template calling/inclusion,
      ; we can also omit the boilerplate table code.
      ; TODO: Update template according to assumption above.
      div(class 'box')
        h1: Addition
        table
          thead tr
            th: term
            th: result
          @.OpRow(odd false, term '5 + a', result 5 + a)
          @.OpRow(odd true, term 'b + 7', result b + 7)
          tr
            td: a + b
            td  a + b
          tr(class odd)
            td: a + a + b
            td  a + a + b
          tr
            td: a + 1.0f
            td  a + 1.0f
          tr(class odd)
            td: 1.0 + b
            td  1.0 + b
          tr
            td: a + 0.0 + b
            td  a + 0.0 + b

      div(class 'box')
        h1: Subtraction
        table
          thead tr
            th: term
            th: result
          tr
            td: 5 - a
            td  5 - a
          tr(class odd)
            td: b - 7
            td  b - 7
          tr
            td: a - b
            td  a - b
          tr(class odd)
            td: a - a - b
            td  a - a - b
          tr
            td: a - 1.0f
            td  a - 1.0f
          tr(class odd)
            td: 1.0 - b
            td  1.0 - b
          tr
            td: a - 0.0 - b
            td  a - 0.0 - b
            
      div(class 'box')
        h1: Multiplication
        table
          thead tr
            th: term
            th: result
          tr
            td: 5 * a
            td  5 * a
          tr(class odd)
            td: b * 7
            td  b * 7
          tr
            td: a * b
            td  a * b
          tr(class odd)
            td: a * a * b
            td  a * a * b
          tr
            td: a * 1.0f
            td  a * 1.0f
          tr(class odd)
            td: 1.0 * b
            td  1.0 * b
          tr
            td: a * 0.0 * b
            td  a * 0.0 * b
            
      div(class 'box')
        h1: Division
        table
          thead tr
            th: term
            th: result
          tr
            td: 5 / a
            td  5 / a
          tr(class odd)
            td: b / 7
            td  b / 7
          tr
            td: a / b
            td  a / b
          tr(class odd)
            td: a / a / b
            td  a / a / b
          tr
            td: a / 1.0f
            td  a / 1.0f
          tr(class odd)
            td: 1.0 / b
            td  1.0 / b
          tr
            td: a / 0.0 / b
            td  a / 0.0 / b
            
      div(class 'box')
        h1: Remainder
        table
          thead tr
            th: term
            th: result
          tr
            td: 5 % a
            td  5 % a
          tr(class odd)
            td: b % 7
            td  b % 7
          tr
            td: a % b
            td  a % b
          tr(class odd)
            td: a % a % b
            td  a % a % b
          tr
            td: a % 1.0f
            td  a % 1.0f
          tr(class odd)
            td: 1.0 % b
            td  1.0 % b
          tr
            td: a % 0.0 % b
            td  a % 0.0 % b

      div(class 'box')
        h1: Increment and Decrement
        table
          mut int value = 0
          thead tr
            th: term
            th: result
          tr
            td: value
            td value
          tr(class odd)
            td: ++value
            td ++value
          tr
            td: value++
            td value++
          tr(class odd)
            td: --value
            td --value
          tr
            td: value--
            td value--
          tr(class odd)
            td: value
            td value

      ; TODO: Print integers in binary form (requires static function calls to be allowed).
      div(class 'box')
        h1: Bitwise
        table
          thead tr
            th: term
            th: result
          tr
            td: a
            td a
          tr(class odd)
            td: ~a
            td ~a
          tr
            td: a & b
            td a & b
          tr(class odd)
            td: a ^ b
            td a ^ b
          tr
            td: a | b
            td a | b

      div(class 'box')
        h1: Shift
        table
          thead tr
            th: term
            th: result
          tr
            td: 1 << 3
            td 1 << 3
          tr(class odd)
            td: 16 >> 2
            td 16 >> 2
          tr
            td: -16 >> 2
            td              ; We need to qualify td as a proper block function call, because
              -16 >> 2      ; the compiler prefers subtraction and trivial function calls
                            ; over statement function calls in this context.
          tr(class odd)
            td: 16 >>> 2
            td 16 >>> 2
          tr
            td: -16 >>> 2
            td
              -16 >>> 2

      div(class 'box')
        h1: Assignment
        table
          mut int value = 0
          thead tr
            th: term
            th: result
          tr
            td: value
            td  value
          tr(class odd)
            td: value += 5
            td
              value += 5
              value
          tr
            td: value -= -8
            td
              value -= -8
              value
          tr(class odd)
            td: value *= 16
            td
              value *= 16
              value
          tr
            td: value = (int) (value / 0.25)
            td
              value = (int) (value / 0.25)
              value
          tr(class odd)
            td: value /= 2
            td
              value /= 2
              value
          tr
            td: value %= 4
            td
              value %= 4
              value
          tr(class odd)
            td: value &= 15
            td
                value &= 15
                value
          tr
            td: value ^= 16
            td
                value ^= 16
                value
          tr(class odd)
            td: value |= 15
            td
                value |= 15
                value
          tr
            td: value >>= 4
            td
              value >>= 4
              value
          tr(class odd)
            td: value <<= 3
            td
              value <<= 3
              value
          tr
            td: value >>>= 1
            td
              value >>>= 1
              value