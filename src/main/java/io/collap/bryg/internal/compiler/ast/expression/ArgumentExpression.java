package io.collap.bryg.internal.compiler.ast.expression;

import bryg.org.objectweb.asm.Label;
import io.collap.bryg.internal.compiler.ast.expression.bool.BooleanExpression;
import io.collap.bryg.internal.compiler.CompilationContext;
import io.collap.bryg.BrygJitException;
import io.collap.bryg.parser.BrygParser;

import javax.annotation.Nullable;

public class ArgumentExpression extends Expression {

    private @Nullable String name;

    private Expression expression;

    /**
     * The argument is skipped if the predicate is false.
     */
    private @Nullable BooleanExpression predicate;

    public ArgumentExpression(CompilationContext compilationContext, BrygParser.ArgumentContext ctx) {
        super(compilationContext);
        setLine(ctx.getStart().getLine());

        @Nullable BrygParser.ArgumentIdContext id = ctx.argumentId();
        if (id != null) {
            name = id.getText();
        }

        if (ctx.expression() == null) {
            throw new BrygJitException("Expression parse tree context is null!", getLine());
        }

        expression = (Expression) compilationContext.getParseTreeVisitor().visit(ctx.expression());

        if (expression.getType().similarTo(Void.TYPE)) {
            throw new BrygJitException("An argument expression must not return void.", getLine());
        }

        setType(expression.getType());

        /* Check for predicate. */
        @Nullable BrygParser.ArgumentPredicateContext predicateContext = ctx.argumentPredicate();
        if (predicateContext != null) {
            Expression predicateExpression = (Expression) compilationContext.getParseTreeVisitor().visit(predicateContext);
            if (predicateExpression instanceof BooleanExpression) {
                predicate = (BooleanExpression) predicateExpression;
            } else {
                throw new BrygJitException("The condition is not a BooleanExpression", getLine());
            }
        } else {
            predicate = null;
        }
    }

    @Override
    public void compile() {
        expression.compile();
    }

    /**
     * The generated bytecode is supposed to be executed right before the argument is handled.
     *
     * @return A label that is supposed to stand after the execution of the argument handling code.
     * Returns null if no predicate exists.
     */
    public @Nullable Label compilePredicate() {
        if (predicate == null) {
            return null;
        }

        Label nextFalseLabel = new Label();
        Label nextTrueLabel = new Label();

        /* Compile the boolean expression, which jumps if necessary. */
        predicate.compile(nextFalseLabel, nextTrueLabel, true);

        compilationContext.getMethodVisitor().visitLabel(nextTrueLabel);
        return nextFalseLabel;
    }

    public @Nullable String getName() {
        return name;
    }

    public void setName(@Nullable String name) {
        this.name = name;
    }

    @Override
    public @Nullable Object getConstantValue() {
        return expression.getConstantValue();
    }

    public Expression getExpression() {
        return expression;
    }

    public @Nullable BooleanExpression getPredicate() {
        return predicate;
    }

}
