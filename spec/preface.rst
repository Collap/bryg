Preface
=======

Bryg is a statically typed language for text generation. Its main goals are type safety, high performance, modularity and a clean syntax.

Increased **type safety** is achieved by using a static type system. Often, arguments passed to a template are objects â€“ which can be changed structurally without touching the templates they are used in. A dynamic type system finds these errors when and *only if* the specific line of code is executed. With a static type checker, such errors are found when the template is compiled, before execution. Using a static type system works beautifully with the JVM, which is the target platform of the Bryg compiler. To reduce redundancy with variable declarations, Bryg tries to infer types where it can.

Traditional template engines parse a template file and produce an intermediate format, which is then executed by an interpreter. While building an interpreter on top of a VM is relatively slow in itself, this approach also creates problems when the engine needs to access objects: They either need to resort to reflection, which is *very slow* compared to direct access, or to using wrappers, which adds another layer of complexity and boilerplate code. To achieve **high performance**, Bryg leverages the capabilities of the JVM by directly compiling templates to bytecode. This compilation happens *just-in-time* before the template is executed the first time. The only area where we can not use direct calls is when executing a Bryg template from Java: Since the template code is compiled *at runtime*, the Java code that uses it can not know about the templates' interfaces. This overhead is relatively small, but we will introduce the possibility for the user to add their own interfaces to templates, which will allow direct access to template functions.

**Modularity** is simple to define: We want to solve the problem of text generation by dividing it into smaller problems, ideally reusing some sub-solutions in other parts of the program. Bryg templates define fragments: They are functions that take some arguments and produce text, which is written to the implicit Writer. Fragments solve these small problems, and they can even be used by other templates. They can also be called through the Java API. So when we say that a template "is executed", we really mean that a fragment of the template, often its default fragment, is invoked.

HTML and many other formats were not designed to be read and written by humans, but machines. Especially HTML is unnecessarily redundant, which makes it a pain to write, but also maintain. Then there are template languages which insert themselves into the syntax of the target format like a parasite. Such practices often result in a very ugly and bloated syntax. To alleviate both problems, Bryg has a few core features that result in a **clean syntax**: Blocks are indicated by indentation, HTML and other text generation functionalities can be implemented via functions, and statements are printed to the implicit Writer by default. Bryg is a programming language first, with syntax and semantics that allow easy and intuitive text generation.

On a side note: Bryg is designed to be used to generate any text, not just HTML. However, this language reference strongly uses HTML in examples.
