// Thanks to Matt Cholick for the awesome gist (https://gist.github.com/mcholick/7177513)!

apply plugin: 'java'
apply plugin: 'idea'
apply plugin: 'maven'

archivesBaseName = 'bryg'
version = '0.3.1'
group = 'io.collap.bryg'

sourceCompatibility = 1.7

repositories {
    mavenCentral()
}

configurations {
    repackage
    antlr4
}

ext.antlr = [
    source: "${rootDir}/src/main/antlr",
    dest: "${rootDir}/gen",
    generated: ['BrygLexer.java', 'BrygLexer.tokens', 'BrygParser.java', 'BrygParser.tokens',
                'BrygParserBaseListener.java', 'BrygParserBaseVisitor.java', 'BrygParserListener.java',
                'BrygParserVisitor.java']
]

dependencies {
    compile 'junit:junit:4.11'
    compile 'com.google.code.findbugs:jsr305:3.0.0'
    compile 'org.reflections:reflections:0.9.9-RC1'
    compile files ('lib/asm-5.0.3.patched.jar')

    repackage 'org.ow2.asm:asm:5.0.3'
    repackage 'org.ow2.asm:asm-tree:5.0.3'
    repackage 'org.ow2.asm:asm-util:5.0.3'
    repackage 'com.googlecode.jarjar:jarjar:1.3'

    compile 'org.antlr:antlr4-runtime:4.3'
    antlr4 'org.antlr:antlr4:4.3'
}

project.ext.set ("shouldRepackage", { !new File ('lib/asm-5.0.3.patched.jar').exists () })

task downloadRepackage (type: Copy) {
    if (shouldRepackage ()) {
        into('repackage')
        from(configurations.repackage)
        exclude('jarjar*')
        duplicatesStrategy(DuplicatesStrategy.EXCLUDE)
    }
}

task applyRepackage (dependsOn: 'downloadRepackage') << {
    if (shouldRepackage ()) {
        project.ant {
            taskdef name: "jarjar", classname: "com.tonicsystems.jarjar.JarJarTask", classpath: configurations.repackage.asPath
            jarjar(jarfile: 'lib/asm-5.0.3.patched.jar', filesetmanifest: "merge") {
                zipfileset(src: 'repackage/asm-5.0.3.jar')
                zipfileset(src: 'repackage/asm-tree-5.0.3.jar')
                zipfileset(src: 'repackage/asm-util-5.0.3.jar')
                rule pattern: "org.objectweb.asm.**", result: "bryg.org.objectweb.asm.@1"
            }
        }
    }
}

task cleanupRepackageLibs (type: Delete, dependsOn: 'applyRepackage') {
    delete 'repackage'
}
compileJava.dependsOn (cleanupRepackageLibs)


task antlrDest {
    mkdir (antlr.dest)
}

/* Generate ANTLR4 sources. */
task antlrGenerate (type: JavaExec, dependsOn: antlrDest) {
    inputs.dir file (antlr.source)
    outputs.dir file (antlr.dest)

    String pkg = 'io/collap/bryg/parser'

    outputs.upToDateWhen {
        boolean upToDate = true
        antlr.generated.each { String name ->
            if (!file (antlr.dest + '/' + pkg + '/' + name).exists ()) {
                upToDate = false
            }
        }
        return upToDate
    }

    def grammars = fileTree (antlr.source).include('**/*.g4')

    main = 'org.antlr.v4.Tool'
    classpath configurations.antlr4
    args = ["-o", "${antlr.dest}/${pkg}", "-visitor", grammars.files].flatten ()
}

compileJava.dependsOn antlrGenerate

sourceSets {
    main {
        java {
            srcDir 'src/main/java'
            srcDir 'gen'
        }
    }
}


clean {
    delete antlr.dest
}

test {
    /* Multiple forks lead to multiple separate Environments to be created, so be
       careful how high you choose the number.
       In normal (non-benchmarking) cases, it does not need to be higher than 1. */
    setMaxParallelForks (1)
}

jar {
    destinationDir = file ("$rootDir")
    from files ('lib/asm-5.0.3.patched.jar').collect { it.isDirectory() ? it : zipTree(it) }
}